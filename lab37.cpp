#include <iostream>
using namespace std;
const int n = 9; //* Обозначаем количество вершин
int i, j;
bool* visited = new bool[n]; //* Создаем переменную, которая принимает n как посещенную и не посещенную (true or false)
int graph[n][n] = { //* Инициализируем граф, в виде смежной матрицы
	{0, 2, 0, 1, 1, 0, 0, 0, 0},
	{2, 0, 1, 0, 1, 1, 0, 0, 0},
	{0, 1, 0, 0, 0, 2, 0, 0, 0},
	{1, 0, 0, 2, 1, 0, 0, 0, 0},
	{1, 1, 0, 1, 0, 0, 0, 0, 0},
	{0, 1, 2, 0, 0, 0, 0, 0, 1},
	{0, 0, 0, 1, 0, 0, 0, 1, 0},
	{0, 0, 0, 0, 0, 0, 1, 2, 3},
	{0, 0, 0, 0, 1, 1, 0, 3, 0}
};
//* Функция поиска в глубину
void DFS(int st) {
	int r; //* Объявляем r как ребро
	cout << st + 1 << " "; //* Выводим текущий узел
	visited[st] = true; //* Устанавливаем текущий узел как посещенный
	for (r = 0; r <= n; r++)
		if ((graph[st][r] != 0) && (!visited[r])) //* Повторяем для всех вершин смежные с этой вершиной
			DFS(r);	//* Вызываем повторно функцию, с аргументом r
}
int main() {
	setlocale(LC_ALL, "Rus");
	int start;
	cout << "Матрица смежности графа: " << endl;
	for (i = 0; i < n; i++) {
		visited[i] = false; //* Устанавливаем i как не посещенную
		for (j = 0; j < n; j++)
			cout << " " << graph[i][j];
		cout << endl;
	}
	cout << "Стартовая вершина >> ";
	cin >> start;
	cout << "Порядок обхода: ";
	DFS(start - 1);	//* Стартовая вершина, с которой начинается поиск
	delete[]visited; //* Удаляем посещенные элементы
	system("pause");
	return 0;
}